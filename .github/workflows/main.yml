name: Build, Analyze, and Deploy Node.js

on:
  push:
    tags:
      - 'v*'  # Releases: v1.08.24

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      run: |
        echo "Logging in to Docker Hub..."
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker image
      run: docker build . -t nodeserver:${{ github.ref_name }}  # Using the tag name as the image tag

    - name: List Docker images
      run: docker image ls

    - name: Tag Docker image
      run: docker tag nodeserver:${{ github.ref_name }} devopsport2165/nodeserver:${{ github.ref_name }}

    - name: Push Docker image to Docker Hub
      run: docker push devopsport2165/nodeserver:${{ github.ref_name }}

  sonarQubeAnalysis:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Check out the code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: SonarQube Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.organization=devopsport
          -Dsonar.projectKey=devopsport_devopsport
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: sonarQubeAnalysis

    steps:
    - name: Deploy to EC2
      env:
        EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        EC2_PUBLIC_ADDRESS: ${{ secrets.EC2_PUBLIC_ADDRESS }}
      run: |
        echo "${EC2_SSH_PRIVATE_KEY}" > private_key.pem
        chmod 600 private_key.pem
        ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_ADDRESS }} << 'EOF'
          # Update and install Docker
          sudo yum update -y
          sudo yum install -y docker
          sudo service docker start

          # Pull Docker image
          docker pull devopsport2165/nodeserver:${{ github.ref_name }}

          # Stop and remove existing container
          docker stop nodeserver || true
          docker rm nodeserver || true

          # Run new container
          docker run -d --name nodeserver -p 80:80 devopsport2165/nodeserver:${{ github.ref_name }}
        EOF
        rm private_key.pem

  notify-infra-repo:
    runs-on: ubuntu-latest
    needs: deploy-to-ec2

    steps:
    - name: Checkout Infrastructure Repo
      uses: actions/checkout@v3
      with:
        repository: https://github.com/your-repo/terraform-infrastructure-iac  # Replace with your repo
        token: ${{ secrets.GIT_TOKEN }}

    - name: Update Deployment Files
      run: |
        echo "Updating Terraform or Deployment files..."

    - name: Commit and Push Changes
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "Automated update for release ${{ github.ref_name }}"
        git push origin main